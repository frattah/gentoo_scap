- name: Policy Crafter Set Up
  hosts: localhost
  vars:
    project_dir: content
    product_cpe: cpe:/o:gentoo:linux:-
    product_name: gentoo
    product_camel_case_name: Gentoo
    product_capital_name: GENTOO
  tasks:
  - name: Clone the project repository
    ansible.builtin.git:
      repo: https://github.com/ComplianceAsCode/content.git
      dest: content
      force: yes

  - name: Create product directories
    block:
      - name: Create products/{{ product_name }} directory
        ansible.builtin.file:
          path: ./content/products/{{ product_name }}
          state: directory
      - name: Create products/{{ product_name}}/overlay directory
        ansible.builtin.file:
          path: ./content/products/{{ product_name }}/overlays
          state: directory
      - name: Create products/{{ product_name }}/profiles directory
        ansible.builtin.file:
          path: ./content/products/{{ product_name }}/profiles
          state: directory
      - name: Create products/{{ product_name }}/transforms directory
        ansible.builtin.file:
          path: ./content/products/{{ product_name }}/transforms
          state: directory

  - name: Modify the CMakeLists.txt file
    block:
      - name: Insert option(SSG_PRODUCT_{{ product_capital_name }} ... )
        ansible.builtin.lineinfile:
          path: ./content/CMakeLists.txt
          insertafter: ^option\(SSG_PRODUCT_FEDORA
          line: option{{ '(' }}SSG_PRODUCT_{{ product_capital_name }} "If enabled, the {{ product_camel_case_name }} SCAP content will be built" ${SSG_PRODUCT_DEFAULT}{{ ')' }}
      - name: Insert message(STATUS "{{ product_camel_case_namee }} ... )
        ansible.builtin.lineinfile:
          path: ./content/CMakeLists.txt
          insertafter: ^message\(STATUS "Fedora
          line: message(STATUS "{{ product_camel_case_name }}{{ ':' }} ${SSG_PRODUCT_{{ product_capital_name }}}")
      - name: Insert if(SSG_PRODUCT_{{ product_capital_name }}) ...
        ansible.builtin.blockinfile:
          path: ./content/CMakeLists.txt
          insertafter: 'endif\(\)'
          block: |
            if(SSG_PRODUCT_{{ product_capital_name }})
                add_subdirectory("products/{{ product_name }}")
            endif()

  - name: Modify the build_product file
    ansible.builtin.lineinfile:
      path: ./content/build_product
      insertafter: 'all_cmake_products=\('
      line: '        {{ product_capital_name }}'

  - name: Modify the ssg/constants.py file
    block:
      - name: Insert {{ product_name }} in product_directories
        ansible.builtin.lineinfile:
          path: ./content/ssg/constants.py
          insertafter: 'product_directories[\s]*=[\s]*\['
          line: "    '{{ product_name }}',"
      - name: Insert {{ product_name }} in FULL_NAME_TO_PRODUCT_MAPPING
        ansible.builtin.lineinfile:
          path: ./content/ssg/constants.py
          insertafter: 'FULL_NAME_TO_PRODUCT_MAPPING[\s]*=[\s]*{'
          line: '    "{{ product_camel_case_name }}": "{{ product_name }}",'
      - name: Insert {{ product_name }} in MULTI_PLATFORM_LIST
        ansible.builtin.lineinfile:
          path: ./content/ssg/constants.py
          insertafter: 'MULTI_PLATFORM_LIST[\s]*=[\s]*\['
          line: '                       "{{ product_name }}",'
      - name: Insert {{ product_name }} in MULTI_PLATFORM_MAPPING
        ansible.builtin.lineinfile:
          path: ./content/ssg/constants.py
          insertafter: 'MULTI_PLATFORM_MAPPING[\s]*=[\s]*{'
          line: '    "multi_platform_{{ product_name }}": ["{{ product_name }}"],'
      - name: Insert {{ product_name }} in MAKEFILE_ID_TO_PRODUCT_MAP
        ansible.builtin.lineinfile:
          path: ./content/ssg/constants.py
          insertafter: 'MAKEFILE_ID_TO_PRODUCT_MAP[\s]*=[\s]*{'
          line: '    "{{ product_camel_case_name }}": "{{ product_name }}",'

  - name: Create the CMakeLists.txt file
    ansible.builtin.blockinfile:
      path: ./content/products/{{ product_name }}/CMakeLists.txt
      create: true
      block: |
        if("\${CMAKE_SOURCE_DIR}" STREQUAL "\${CMAKE_CURRENT_SOURCE_DIR}")
        message(FATAL_ERROR "cmake has to be used on the root CMakeLists.txt, see the Building ComplianceAsCode section in the Developer Guide!")
        endif()

        ssg_build_product("{{ product_name }}")

  - name: Create the product.yml file
    ansible.builtin.blockinfile:
      path: ./content/products/{{ product_name }}/product.yml
      create: true
      block: |
        product: {{ product_name }}
        full_name: {{ product_name}}
        type: platform

        benchmark_id: "{{ product_camel_case_name }}"
        benchmark_root: "../../linux_os/guide"

        components_root: "../../components"

        profiles_root: "./profiles"

        pkg_manager: "yum"

        init_system: "systemd"

        cpes_root: "../../shared/applicability"
        cpes:
          - {{ product_name }}:
              name: {{ product_cpe }}
              title: "{{ product_camel_case_name }}"
              check_id: installed_OS_is_{{ product_name }}

  - name: Create the ./content/{{ product_name }}/transforms/constant.xslt
    ansible.builtin.blockinfile:
      path: ./content/{{ product_name }}/transforms/constant.xslt
      create: true
      block: |
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

        <xsl:include href="../../../shared/transforms/shared_constants.xslt"/>

        <xsl:variable name="product_long_name">{{ product_camel_case_name }}</xsl:variable>
        <xsl:variable name="product_short_name">{{ product_camel_case_name }}</xsl:variable>
        <xsl:variable name="product_stig_id_name">empty</xsl:variable>
        <xsl:variable name="prod_type">{{ product_name }}</xsl:variable>

        <xsl:variable name="cisuri">https://benchmarks.cisecurity.org/tools2/linux/CIS_${CAMEL_CASE_NAME}_Benchmark_v1.0.pdf</xsl:variable>

        </xsl:stylesheet>

  - name: Create the ./content/shared/checks/oval/installed_OS_is_{{ product_name }}.xml file
    ansible.builtin.blockinfile:
      path: ./content/shared/checks/oval/installed_OS_is_{{ product_name }}.xml
      create: true
      block: |
        <def-group>
          <definition class="inventory" id="installed_OS_is_{{ product_name }}" version="3">
            <metadata>
              <title>{{ product_camel_case_name }}</title>
              <affected family="unix">
                <platform>multi_platform_all</platform>
              </affected>
              <reference ref_id="{{ product_cpe }}" source="CPE" />
              <description>The operating system installed on the system is {{ product_camel_case_name }}</description>
            </metadata>
            <criteria comment="current OS is {{ product_name }}" operator="AND">
              <extend_definition comment="Installed OS is part of the Unix family" definition_ref="installed_OS_is_part_of_Unix_family" />
              <criterion comment="{{ product_camel_case_name }} is installed" test_ref="test_{{ product_name }}" />
            </criteria>
          </definition>

          <unix:file_test check="all" check_existence="all_exist" comment="/etc/{{ product_name }}-release exists" id="test_{{ product_name }}" version="1">
            <unix:object object_ref="obj_{{ product_name }}" />
          </unix:file_test>
          <unix:file_object comment="check /etc/{{ product_name }}-release file" id="obj_{{ product_name }}" version="1">
            <unix:filepath>/etc/{{ product_name }}-release</unix:filepath>
          </unix:file_object>

        </def-group>
